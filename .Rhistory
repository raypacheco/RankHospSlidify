## outcome types and the referring column number in the table
types <- c("heart attack", "heart failure", "pneumonia")
colNum <- c(11, 17, 23)
names(colNum) <- types
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings=c("Not Available" "NA"))
## Check that state and outcome are valid
if(!(state %in% outcome[,7]){
stop("invalid state")}
if(!(outcome %in% types)){
stop("invalid outcome")}
## change needed column to numeric data first
data[,colNum[[outcome]]] <- as.numeric(data[,colNum[[outcome]]])
## Subset data to specified state and outcome
sub <- subset(data[c(2,colNum[[outcome]])], data$State == state)
## Alphabatize subset in case of ties for min
ordered <- sub[do.call(order, sub),]
## Return hospital name in that state with lowest 30-day
## death rate
ordered[which.min(ordered[,2]),1]
}
best <- function(state, outcome) {
## outcome types and the referring column number in the table
types <- c("heart attack", "heart failure", "pneumonia")
colNum <- c(11, 17, 23)
names(colNum) <- types
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings=c("Not Available", "NA"))
## Check that state and outcome are valid
if(!(state %in% outcome[,7])){
stop("invalid state")}
if(!(outcome %in% types)){
stop("invalid outcome")}
## change needed column to numeric data first
data[,colNum[[outcome]]] <- as.numeric(data[,colNum[[outcome]]])
## Subset data to specified state and outcome
sub <- subset(data[c(2,colNum[[outcome]])], data$State == state)
## Alphabatize subset in case of ties for min
ordered <- sub[do.call(order, sub),]
## Return hospital name in that state with lowest 30-day
## death rate
ordered[which.min(ordered[,2]),1]
}
best("TX", "heart attack")
best("TX", "heart attack")
best <- function(state, outcome) {
## outcome types and the referring column number in the table
types <- c("heart attack", "heart failure", "pneumonia")
colNum <- c(11, 17, 23)
names(colNum) <- types
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings=c("Not Available", "NA"))
## Check that state and outcome are valid
if(!(state %in% data[,7])){
stop("invalid state")}
if(!(outcome %in% types)){
stop("invalid outcome")}
## change needed column to numeric data first
data[,colNum[[outcome]]] <- as.numeric(data[,colNum[[outcome]]])
## Subset data to specified state and outcome
sub <- subset(data[c(2,colNum[[outcome]])], data$State == state)
## Alphabatize subset in case of ties for min
ordered <- sub[do.call(order, sub),]
## Return hospital name in that state with lowest 30-day
## death rate
ordered[which.min(ordered[,2]),1]
}
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
submit()
state
head(state)
lenght(state)
length(state)
nrow(state)
state$new.col <- 1:nrow(state)
summary(state)
?do.call
?order
set.seed(1)
d4 <- data.frame(x = round(rnorm(100)), y = round(10*runif(100)), z = round(8*rnorm(100)), u = round(50*runif(100)))
d4
order(d4)
d4[do.call(order, d4)]
d4[do.call(order, d4),]
d4s <- d4[do.call(order, d4),]
i <- which(diff(d4s[,3]) == 0)
d4s[rbind(i, i+1),]
which(diff(d4s[,3]) == 0)
d4s[,3]
diff(d4s[,3])
?diff
summary(state)
texas <- subset(outcome[c(2,11)], outcome$State == "TX")
str(texas)
texaslevel <- texas[order(texas[,2])]
texaslevel <- texas[order(texas[,2]),]
head(texaslevel)
texaslevel <- texas[order(texas[,2], texas[,1]),]
head(texaslevel)
texaslevel$rank <- 1:nrow(texaslevel)
head(texaslevel)
texashf <- subset(outcome[c(2,17)], outcome$State == "TX")
texashflevel <- texashf[order(texashf[,2], texashf[,1]),]
texaslevelhf$rank <- 1:nrow(texashflevel)
texashflevel$rank <- 1:nrow(texashflevel)
head(texashflevel)
texashflevel[1,1]
texashflevel[nrow(texashflevel),1]
tail(texashflevel)
?subset
sub <- complete.cases(texashflevel)
tail(sub)
sub <- texashflevel[complete.cases(texashflevel),]
tail(sub)
sub[nrow(sub),1]
rankhospital <- function(state, outcome, num = "best") {
## outcome types and the referring column number in the table
types <- c("heart attack", "heart failure", "pneumonia")
colNum <- c(11, 17, 23)
names(colNum) <- types
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings=c("Not Available", "NA"))
## Check that state and outcome are valid
if(!(state %in% data[,7])){
stop("invalid state")}
if(!(outcome %in% types)){
stop("invalid outcome")}
## change needed column to numeric data first
data[,colNum[[outcome]]] <- as.numeric(data[,colNum[[outcome]]])
## Subset data to specified state and outcome
sub <- subset(data[c(2,colNum[[outcome]])], data$State == state)
## Alphabatize subset in case of ties for min
ordered <- sub[order(sub[,2], sub[,1]),]
## Remove rows with NA values
ordered <- ordered[complete.cases(ordered),]
## Add column with ranking for that state
ordered$Rank <- 1:nrow(ordered)
## Return hospital name in that state with the given rank
## 30-day death rate
if(num = "best"){
ordered[1,1]}
else {if(num = "worst"){
ordered[nrow(ordered),1]}
else {if(num > nrow(ordered)){
"NA"}
else {ordered[num,1]}}}
}
rankhospital <- function(state, outcome, num = "best") {
## outcome types and the referring column number in the table
types <- c("heart attack", "heart failure", "pneumonia")
colNum <- c(11, 17, 23)
names(colNum) <- types
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings=c("Not Available", "NA"))
## Check that state and outcome are valid
if(!(state %in% data[,7])){
stop("invalid state")}
if(!(outcome %in% types)){
stop("invalid outcome")}
## change needed column to numeric data first
data[,colNum[[outcome]]] <- as.numeric(data[,colNum[[outcome]]])
## Subset data to specified state and outcome
sub <- subset(data[c(2,colNum[[outcome]])], data$State == state)
## Alphabatize subset in case of ties for min
ordered <- sub[order(sub[,2], sub[,1]),]
## Remove rows with NA values
ordered <- ordered[complete.cases(ordered),]
## Add column with ranking for that state
ordered$Rank <- 1:nrow(ordered)
## Return hospital name in that state with the given rank
## 30-day death rate
if(num == "best"){
ordered[1,1]}
else {if(num == "worst"){
ordered[nrow(ordered),1]}
else {if(num > nrow(ordered)){
"NA"}
else {ordered[num,1]}}}
}
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
rankhospital <- function(state, outcome, num = "best") {
## outcome types and the referring column number in the table
types <- c("heart attack", "heart failure", "pneumonia")
colNum <- c(11, 17, 23)
names(colNum) <- types
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings=c("Not Available", "NA"))
## Check that state and outcome are valid
if(!(state %in% data[,7])){
stop("invalid state")}
if(!(outcome %in% types)){
stop("invalid outcome")}
## change needed column to numeric data first
data[,colNum[[outcome]]] <- as.numeric(data[,colNum[[outcome]]])
## Subset data to specified state and outcome
sub <- subset(data[c(2,colNum[[outcome]])], data$State == state)
## Alphabatize subset in case of ties for min
ordered <- sub[order(sub[,2], sub[,1]),]
## Remove rows with NA values
ordered <- ordered[complete.cases(ordered),]
## Add column with ranking for that state
ordered$Rank <- 1:nrow(ordered)
## Return hospital name in that state with the given rank
## 30-day death rate
if(num == "best"){
ordered[1,1]}
else {if(num == "worst"){
ordered[nrow(ordered),1]}
else {if(num > nrow(ordered)){
NA}
else {ordered[num,1]}}}
}
rankhospital("MN", "heart attack", 5000)
submit()
submit()
submit()
submit()
rankhospital("NY", "heart attak", 7)
set.seed(1)
rpois(5,2)
?dpois
?qpois
?pnorm
set.seed(10)
x <- rbinom(10,10,.5)
x
e <- rnorm(10, 0, 20)
e
y <- 0.5 + 2*x + e
y
?Rprofiler
?profileR
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
q
x1 <- 1
x2 <- 2
y <- 3
fit <- lm(y ~ X1 + X2)
fit <- lm(y ~ x1 + x2)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
system.time()
?system.time
?split
split(outcome)
split(outcome, outcome$State)
split(outcome[c(2,7,11)], outcome$State)
spl <- split(outcome[c(2,7,11)], outcome$State)
ord <- ordered[spl[spl[,3], spl[,2]]]
length(spl)
ncol(spl)
?grep
rankall <- function(outcome, num = "best") {
## outcome types and the referring column number in the table
types <- c("heart attack", "heart failure", "pneumonia")
colNum <- c(11, 17, 23)
names(colNum) <- types
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings=c("Not Available", "NA"))
## Check that outcome is valid
if(!(outcome %in% types)){
stop("invalid outcome")}
## change needed column to numeric data first
data[,colNum[[outcome]]] <- as.numeric(data[,colNum[[outcome]]])
## create list for the data frame hospital outcomes
hospitals <- c()
## create a list of all unique states
states <- sort(unique(data$State))
## loop through all states (probably could use apply here)
for(s in states){
## subset each state for specified outcome
sub <- subset(data[c(2,colNum[[outcome]])], data$State == s)]
## Alphabatize subset in case of ties for min
ordered <- sub[order(sub[,2], sub[,1]),]
## Remove rows with NA values
ordered <- ordered[complete.cases(ordered),]
## Return hospital name in that state with the given rank
## 30-day death rate
if(num == "best"){ num <- 1}
if(num == "worst"){ num <- nrow(ordered)}
if(num > nrow(ordered)){
hospitals <- append(hospitals, <NA>)}
else {hospitals <- append(hospitals, ordered[num,1])}
}
## create output dataframe
data.frame(Hospital=hospitals, State=states)
}
rankall <- function(outcome, num = "best") {
## outcome types and the referring column number in the table
types <- c("heart attack", "heart failure", "pneumonia")
colNum <- c(11, 17, 23)
names(colNum) <- types
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings=c("Not Available", "NA"))
## Check that outcome is valid
if(!(outcome %in% types)){
stop("invalid outcome")}
## change needed column to numeric data first
data[,colNum[[outcome]]] <- as.numeric(data[,colNum[[outcome]]])
## create list for the data frame hospital outcomes
hospitals <- c()
## create a list of all unique states
states <- sort(unique(data$State))
## loop through all states (probably could use apply here)
for(s in states){
## subset each state for specified outcome
sub <- subset(data[c(2,colNum[[outcome]])], data$State == s)]
## Alphabatize subset in case of ties for min
ordered <- sub[order(sub[,2], sub[,1]),]
## Remove rows with NA values
ordered <- ordered[complete.cases(ordered),]
## Return hospital name in that state with the given rank
## 30-day death rate
if(num == "best"){
hospitals <- append(hospitals, ordered[1,1])}
else {if(num == "worst"){
hospitals <- append(hospitals, ordered[nrow(ordered),1])}
else {if(num > nrow(ordered)){
hospitals <- append(hospitals, "<NA>"}
else {hospitals <- append(hospitals, ordered[num,1])}}}
}
## create output dataframe
data.frame(Hospital=hospitals, State=states)
}
rankall <- function(outcome, num = "best") {
## outcome types and the referring column number in the table
types <- c("heart attack", "heart failure", "pneumonia")
colNum <- c(11, 17, 23)
names(colNum) <- types
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings=c("Not Available", "NA"))
## Check that outcome is valid
if(!(outcome %in% types)){
stop("invalid outcome")}
## change needed column to numeric data first
data[,colNum[[outcome]]] <- as.numeric(data[,colNum[[outcome]]])
## create list for the data frame hospital outcomes
hospitals <- c()
## create a list of all unique states
states <- sort(unique(data$State))
## loop through all states (probably could use apply here)
for(s in states){
num <- num
## subset each state for specified outcome
sub <- subset(data[c(2,colNum[[outcome]])], data$State == s)
## Alphabatize subset in case of ties for min
ordered <- sub[order(sub[,2], sub[,1]),]
## Remove rows with NA values
ordered <- ordered[complete.cases(ordered),]
## Return hospital name in that state with the given rank
## 30-day death rate
if(num == "best"){
hospitals <- append(hospitals, ordered[1,1])}
else {if(num == "worst"){
hospitals <- append(hospitals, ordered[nrow(ordered),1])}
else {if(num > nrow(ordered)){
hospitals <- append(hospitals, "<NA>"}
else {hospitals <- append(hospitals, ordered[num,1])}}}
}
## create output dataframe
data.frame(Hospital=hospitals, State=states)
}
rankhospital <- function(state, outcome, num = "best") {
## outcome types and the referring column number in the table
types <- c("heart attack", "heart failure", "pneumonia")
colNum <- c(11, 17, 23)
names(colNum) <- types
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings=c("Not Available", "NA"))
## Check that state and outcome are valid
if(!(state %in% data[,7])){
stop("invalid state")}
if(!(outcome %in% types)){
stop("invalid outcome")}
## change needed column to numeric data first
data[,colNum[[outcome]]] <- as.numeric(data[,colNum[[outcome]]])
## Subset data to specified state and outcome
sub <- subset(data[c(2,colNum[[outcome]])], data$State == state)
## Alphabatize subset in case of ties for min
ordered <- sub[order(sub[,2], sub[,1]),]
## Remove rows with NA values
ordered <- ordered[complete.cases(ordered),]
## Add column with ranking for that state
ordered$Rank <- 1:nrow(ordered)
## Return hospital name in that state with the given rank
## 30-day death rate
if(num == "best"){
ordered[1,1]}
else {if(num == "worst"){
ordered[nrow(ordered),1]}
else {if(num > nrow(ordered)){
NA}
else {ordered[num,1]}}}
}
rankall <- function(outcome, num = "best") {
## outcome types and the referring column number in the table
types <- c("heart attack", "heart failure", "pneumonia")
colNum <- c(11, 17, 23)
names(colNum) <- types
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings=c("Not Available", "NA"))
## Check that outcome is valid
if(!(outcome %in% types)){
stop("invalid outcome")}
## change needed column to numeric data first
data[,colNum[[outcome]]] <- as.numeric(data[,colNum[[outcome]]])
## create list for the data frame hospital outcomes
hospitals <- c()
## create a list of all unique states
states <- sort(unique(data$State))
## loop through all states (probably could use apply here)
for(s in states){
num <- num
## subset each state for specified outcome
sub <- subset(data[c(2,colNum[[outcome]])], data$State == s)
## Alphabatize subset in case of ties for min
ordered <- sub[order(sub[,2], sub[,1]),]
## Remove rows with NA values
ordered <- ordered[complete.cases(ordered),]
## Return hospital name in that state with the given rank
## 30-day death rate
if(num == "best"){
hospitals <- append(hospitals, ordered[1,1])}
else {if(num == "worst"){
hospitals <- append(hospitals, ordered[nrow(ordered),1])}
else {if(num > nrow(ordered)){
hospitals <- append(hospitals, "<NA>")}
else {hospitals <- append(hospitals, ordered[num,1])}}}
}
## create output dataframe
data.frame(Hospital=hospitals, State=states)
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
submit()
submit()
submit()
submit()
submit()
rankall <- function(outcome, num = "best") {
## outcome types and the referring column number in the table
types <- c("heart attack", "heart failure", "pneumonia")
colNum <- c(11, 17, 23)
names(colNum) <- types
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings=c("Not Available", "NA"))
## Check that outcome is valid
if(!(outcome %in% types)){
stop("invalid outcome")}
## change needed column to numeric data first
data[,colNum[[outcome]]] <- as.numeric(data[,colNum[[outcome]]])
## create list for the data frame hospital outcomes
hospitals <- c()
## create a list of all unique states
states <- sort(unique(data$State))
## loop through all states (probably could use apply here)
for(s in states){
num <- num
## subset each state for specified outcome
sub <- subset(data[c(2,colNum[[outcome]])], data$State == s)
## Alphabatize subset in case of ties for min
ordered <- sub[order(sub[,2], sub[,1]),]
## Remove rows with NA values
ordered <- ordered[complete.cases(ordered),]
## Return hospital name in that state with the given rank
## 30-day death rate
if(num == "best"){
hospitals <- append(hospitals, ordered[1,1])}
else {if(num == "worst"){
hospitals <- append(hospitals, ordered[nrow(ordered),1])}
else {if(num > nrow(ordered)){
hospitals <- append(hospitals, "<NA>")}
else {hospitals <- append(hospitals, ordered[num,1])}}}
}
## create output dataframe
data.frame(hospital=hospitals, state=states)
}
rankall(outcome = heart attack)
rankall("heart attack")
ha <- rankall("heart attack")
write.csv(ha, file = "heartAttack.csv")
hf <- rankall("heart failure")
write.csv(hf, file = "heartFailure.csv")
p <-rankall("pneumonia")
write.csv(p, file = "pneumonia.csv")
library(slidify)
setwd("~/Coursera/Developing Data Products")
author("Rank_Hospital")
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
publish(title = 'Rank_Hospital', 'index.html', host = 'rpubs')
install.packages("markdown")
install.packages("markdown")
install.packages("markdown")
install.packages("markdown")
